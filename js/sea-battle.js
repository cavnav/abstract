// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–ª–µ–π
function loadStyles() {
  const link = document.createElement('link');
  link.rel = 'stylesheet';
  link.href = './js/sea-battle.css'; // –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É CSS-—Ñ–∞–π–ª—É
  document.head.appendChild(link);
}

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–ª–µ–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞
loadStyles();

// –ü–æ–ª—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
let playerField = {
  a1: 'water', a2: 'water', a3: 'water',
  b1: 'water', b2: 'water', b3: 'water',
  c1: 'water', c2: 'water', c3: 'water',
};

let computerField = {
  a1: 'water', a2: 'water', a3: 'water',
  b1: 'water', b2: 'water', b3: 'water',
  c1: 'water', c2: 'water', c3: 'water',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—è
function runCommand(command) {
  const contextKeys = Object.keys(playerField);
  const contextValues = Object.values(playerField);

  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    const updatedContext = new Function(...contextKeys, `
      "use strict"; 
      ${command}
      
      // –°–æ–±–∏—Ä–∞–µ–º –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç
      const updatedContext = { ${contextKeys.map(key => `${key}: ${key}`).join(', ')} };
      return updatedContext;
    `)(...contextValues);

    Object.assign(playerField, updatedContext)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
    console.log(111, playerField)
    //renderField({playerField, containerId: 'player-field'});
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
  }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
function renderField({field, containerId}) {
  const container = document.getElementById(containerId);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  if (!container) {
    console.error(`–≠–ª–µ–º–µ–Ω—Ç —Å id="${containerId}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  container.innerHTML = "";

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏
  const rowLabels = ["1", "2", "3"];
  const colLabels = ["A", "B", "C"];
  container.innerHTML = `
    <div class="board-row">
      <div class="label"></div>
      ${colLabels.map((col) => `<div class="label">${col}</div>`).join("")}
    </div>
  `;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —è—á–µ–π–∫–∞–º–∏
  rowLabels.forEach((row, rowIndex) => {
    container.innerHTML += `
      <div class="board-row">
        <div class="label">${row}</div>
        ${colLabels
        .map((col, colIndex) => {
          const cellId = col.toLowerCase() + (rowIndex + 1);
          return `<div id="${cellId}" class="cell"></div>`;
        })
        .join("")}
      </div>
    `;
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è—á–µ–µ–∫
  for (const key in field) {
    const cell = document.getElementById(key);

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —è—á–µ–µ–∫
    if (!cell) {
      console.warn(`–Ø—á–µ–π–∫–∞ —Å id="${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
      continue;
    }

    cell.textContent =
      field[key] === "water"
        ? "üåä"
        : field[key] === "hit"
          ? "üî•"
          : field[key] === "miss"
            ? "üí•"
            : "üö¢";
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
function startGame(content) {
  content.innerHTML = `
    <h2>–ú–æ—Ä—Å–∫–æ–π –±–æ–π</h2>
    <div class="player-board">
      <h3>–ü–æ–ª–µ –∏–≥—Ä–æ–∫–∞</h3>
      <div id="player-field" class="board">
        ${renderBoardHTML()}
      </div>
    </div>
    <div class="computer-board">
      <h3>–ü–æ–ª–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞</h3>
      <div id="computer-field" class="board">
        ${renderBoardHTML()}
      </div>
    </div>
  `;
  renderField();

  alert("–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –≤–∞—à –∫–æ—Ä–∞–±–ª—å, –≤—ã–±—Ä–∞–≤ —è—á–µ–π–∫—É.");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –ø–æ–ª—è
function renderBoardHTML() {
  return `
    <div id="a1" class="cell"></div>
    <div id="a2" class="cell"></div>
    <div id="a3" class="cell"></div>
    <div id="b1" class="cell"></div>
    <div id="b2" class="cell"></div>
    <div id="b3" class="cell"></div>
    <div id="c1" class="cell"></div>
    <div id="c2" class="cell"></div>
    <div id="c3" class="cell"></div>
  `;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
export function init(content) {
  content.innerHTML = `
    <div><h2>–ú–æ—Ä—Å–∫–æ–π –±–æ–π</h2></div>
    <div class="flex">
      <div class="player-board">
        <h3>–¢–≤–æ—è –∫–∞—Ä—Ç–∞</h3>
        <div id="player-field" class="board"></div>
      </div>
      <div class="computer-board">
        <h3>–ö–∞—Ä—Ç–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞</h3>
        <div id="computer-field" class="board"></div>
      </div>
    </div>
  `;

  const size = 3
  generateBattlefield({ size, containerId: 'player-field' })
  generateBattlefield({ size, containerId: 'computer-field' })
}

function generateBattlefield({ size, containerId }) {
  const rows = size
  const cols = size
  const container = document.getElementById(containerId)

  const table = document.createElement('table');

  const letters = ['a', 'b', 'c'];
  const textures = {
    water: 'üåä',
    ship: 'üö¢',
    rocket: 'üöÄ',
    explosion: 'üí•',
    miss: '‚ùå'
  };

  // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
  const headerRow = document.createElement('tr');
  const emptyHeader = document.createElement('th');
  headerRow.appendChild(emptyHeader); // –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
  for (let col = 0; col < cols; col++) {
    const th = document.createElement('th');
    th.textContent = letters[col];
    headerRow.appendChild(th);
  }
  table.appendChild(headerRow);

  // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
  for (let row = 1; row <= rows; row++) {
    const tr = document.createElement('tr');

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–æ–∫–∏
    const rowHeader = document.createElement('th');
    rowHeader.textContent = row;
    tr.appendChild(rowHeader);

    // –Ø—á–µ–π–∫–∏
    for (let col = 0; col < cols; col++) {
      const td = document.createElement('td');
      td.dataset.row = row;
      td.dataset.col = letters[col];
      td.textContent = textures.water; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –≤–æ–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
      td.addEventListener('click', () => {
        if (td.textContent === textures.water) {
          td.textContent = textures.miss; // –ü–æ–º–µ—á–∞–µ–º "–º–∏–º–æ"
        } else if (td.textContent === textures.ship) {
          td.textContent = textures.explosion; // –ü–æ–ø–∞–¥–∞–Ω–∏–µ
        }
      });

      tr.appendChild(td);
    }

    table.appendChild(tr);
  }

  container.appendChild(table);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—è 3x3


export { runCommand };

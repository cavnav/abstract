import './order.css'

const colors = {
    "üçÖ": "#ff0000", // –ö—Ä–∞—Å–Ω—ã–π - –ø–æ–º–∏–¥–æ—Ä
    "ü•ï": "#ff8000", // –û—Ä–∞–Ω–∂–µ–≤—ã–π - –º–æ—Ä–∫–æ–≤—å
    "üçã": "#ffff00", // –ñ—ë–ª—Ç—ã–π - –ª–∏–º–æ–Ω
    "ü•í": "#00ff00", // –ó–µ–ª—ë–Ω—ã–π - –æ–≥—É—Ä–µ—Ü
    "ü´ê": "#0000ff", // –°–∏–Ω–∏–π - —á–µ—Ä–Ω–∏–∫–∞
    "üçÜ": "#800080", // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π - –±–∞–∫–ª–∞–∂–∞–Ω
    "üßÑ": "#ffffff", // –ë–µ–ª—ã–π - —á–µ—Å–Ω–æ–∫
    "ü´í": "#333333", // –ß—ë—Ä–Ω—ã–π - —á—ë—Ä–Ω–∞—è –æ–ª–∏–≤–∞
    "ü•î": "#a52a2a"  // –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π - –∫–∞—Ä—Ç–æ—à–∫–∞
};

const house = {};
const roomCoordinates = [
    "a1", "a2", "a3",
    "b1", "center", "b3",
    "c1", "c2", "c3"
];
let outputCallback = null;

// –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—ã —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
function generateHouse() {
    const availableColors = Object.values(colors);
    const shuffledColors = [...availableColors].sort(() => Math.random() - 0.5).slice(0, roomCoordinates.length);

    roomCoordinates.forEach((coord, i) => {
        house[coord] = {
            color: shuffledColors[i], // –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç
            object: coord === "center" ? null : Object.keys(colors)[i % Object.keys(colors).length] // –¶–µ–Ω—Ç—Ä –ø—É—Å—Ç–æ–π
        };
    });

    renderHouse();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–º–∞
function renderHouse() {
    roomCoordinates.forEach(coord => {
        const div = document.getElementById(coord);
        if (div) {
            div.style.background = house[coord].color;
            div.textContent = house[coord].object || " ";
        }
    });
    checkWin();
}

// –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥
function runCommand(command) {
    try {
        new Function("house", `
            "use strict"; 
            ${command}
        `)(house);

        renderHouse();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
        outputCallback({message: '–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ!'});
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
function checkWin() {
    const allCorrect = roomCoordinates.every(coord => {
        const room = house[coord];
        return room.object && colors[room.object] === room.color;
    });

    outputCallback({ message: allCorrect ? "–ü–æ—Ä—è–¥–æ–∫ –Ω–∞–≤–µ–¥–µ–Ω! üéâ" : "" });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
export function init({ container, output }) {
    outputCallback = output;

    container.innerHTML = `
        <h1>–ü–æ—Ä—è–¥–æ–∫</h1>
        <div class="grid-container">
            <div></div> <!-- –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞ -->
            <div class="grid-header">a</div>
            <div class="grid-header">b</div>
            <div class="grid-header">c</div>

            <div class="grid-header">1</div>
            <div id="a1" class="room"></div>
            <div id="b1" class="room"></div>
            <div id="c1" class="room"></div>

            <div class="grid-header">2</div>
            <div id="a2" class="room"></div>
            <div id="center" class="room center"></div>
            <div id="b2" class="room"></div>

            <div class="grid-header">3</div>
            <div id="a3" class="room"></div>
            <div id="b3" class="room"></div>
            <div id="c3" class="room"></div>
        </div>
    `;

    generateHouse();
}

export { runCommand };

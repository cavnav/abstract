// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–ª–µ–π
function loadStyles() {
  const link = document.createElement('link');
  link.rel = 'stylesheet';
  link.href = './src/sea-battle.css'; // –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É CSS-—Ñ–∞–π–ª—É
  document.head.appendChild(link);
}

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–ª–µ–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞
loadStyles();

// –ü–æ–ª—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
let playerField = {
  a1: 'water', a2: 'water', a3: 'water',
  b1: 'water', b2: 'water', b3: 'water',
  c1: 'water', c2: 'water', c3: 'water',
};

let computerField = {
  a1: 'water', a2: 'water', a3: 'water',
  b1: 'water', b2: 'water', b3: 'water',
  c1: 'water', c2: 'water', c3: 'water',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—è
function runCommand(command) {
  const contextKeys = Object.keys(playerField);
  const contextValues = Object.values(playerField);

  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    const updatedContext = new Function(...contextKeys, `
      "use strict"; 
      ${command}
      
      // –°–æ–±–∏—Ä–∞–µ–º –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç
      const updatedContext = { ${contextKeys.map(key => `${key}: ${key}`).join(', ')} };
      return updatedContext;
    `)(...contextValues);

    Object.assign(playerField, updatedContext)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
    generateBattlefield({field: playerField, containerId: 'player-field'});
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
export function init(content) {
  content.innerHTML = `
    <div><h2>–ú–æ—Ä—Å–∫–æ–π –±–æ–π</h2></div>
    <div class="flex">
      <div class="player-board">
        <h3>–¢–≤–æ—è –∫–∞—Ä—Ç–∞</h3>
        <div id="player-field" class="board"></div>
      </div>
      <div class="computer-board">
        <h3>–ö–∞—Ä—Ç–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞</h3>
        <div id="computer-field" class="board"></div>
      </div>
    </div>
  `;

  generateBattlefield({ containerId: 'player-field', field: playerField })
  generateBattlefield({ containerId: 'computer-field', field: computerField })
}

function generateBattlefield({ size = 3, containerId, field }) {
  const rows = size
  const cols = size
  const container = document.getElementById(containerId)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  if (!container) {
    console.error(`–≠–ª–µ–º–µ–Ω—Ç —Å id="${containerId}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  container.innerHTML = "";

  const table = document.createElement('table');

  const letters = ['a', 'b', 'c'];
  const texturesMap = getSpecNames();
  const textures = Object.values(texturesMap)

  // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
  const headerRow = document.createElement('tr');
  const emptyHeader = document.createElement('th');
  headerRow.appendChild(emptyHeader); // –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞

  for (let col = 0; col < cols; col++) {
    const th = document.createElement('th');
    th.textContent = letters[col];
    headerRow.appendChild(th);
  }
  table.appendChild(headerRow);

  // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
  for (let row = 1; row <= rows; row++) {
    const tr = document.createElement('tr');

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–æ–∫–∏
    const rowHeader = document.createElement('th');
    rowHeader.textContent = row;
    tr.appendChild(rowHeader);

    // –Ø—á–µ–π–∫–∏
    for (let col = 0; col < cols; col++) {
      const td = document.createElement('td');
      td.dataset.row = row;
      td.dataset.col = letters[col]
      const key = letters[col]+row
      let texture = textures.find(code => code === field[key])
      if (texture && texture === texturesMap.rocket) {
        texture = texturesMap.miss
      }
      td.textContent = texture || texturesMap.water

      tr.appendChild(td);      
    }

    table.appendChild(tr);
  }

  container.appendChild(table);
}

function getSpecNames() {
  return {
    water: 'üåä',
    ship: 'üö¢',
    rocket: 'üöÄ',
    explosion: 'üí•',
    miss: '‚ùå'
  }
}

const namespace = Object.values(getSpecNames()).reduce((res, value) => {res[value] = 1; return res;}, {})
export { 
  runCommand,
  namespace
 };
